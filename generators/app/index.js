const Generator = require('yeoman-generator');

module.exports = class extends Generator {
    // The name `constructor` is important here
    constructor(args, opts) {
        // Calling the super constructor is important so our generator is correctly set up
        super(args, opts);

        // Next, add your custom code
        this.option('babel'); // This method adds support for a `--babel` flag

        // This makes `appname` a required argument.
        this.argument('appname', { type: String, required: false });

        // This method adds support for a `--coffee` flag
        this.option('skip-welcome', {
            desc: 'Skips the welcome message',
            type: Boolean
        });

        this.option('install');
    }

    initializing() {
        this.log(require('yeoman-welcome'));
        this.log('Generator Qc-Cli Starting...');

    }

    prompting() {
        return this.prompt([{
            type    : 'input',
            name    : 'name',
            message : 'Your project name',
            default : this.options.appname || this.appname // Default to current folder name
        }, {
            type    : 'confirm',
            name    : 'cool',
            message : 'Would you like to enable the Cool feature?'
        }]).then((answers) => {
            // this.log('app name', answers.name);
            // this.log('cool feature', answers.cool);
        });
    }

    configuring() {
        let defaultSettings = this.fs.readJSON(this.templatePath('../../_package.json'));

        let packageSettings = {
            name: this.appName,
            private: true,
            version: '0.0.1',
            description: `${this.appName} - Generated by generator-react-webpack`,
            main: 'src/index.js',
            scripts: defaultSettings.scripts,
            repository: '',
            keywords: [],
            author: 'Your name here',
            devDependencies: defaultSettings.devDependencies,
            dependencies: defaultSettings.dependencies
        };

        // Add postcss module if enabled
        let postcssConfig = utils.config.getChoiceByKey('postcss', 'postcss');
        if(this.postcss && postcssConfig && postcssConfig.packages) {

            for(let dependency of postcssConfig.packages) {
                packageSettings.devDependencies[dependency.name] = dependency.version;
            }
        }

        this.fs.writeJSON(this.destinationPath('package.json'), packageSettings);
    }

    paths() {
        this.destinationRoot();
        this.sourceRoot();
    }

    writing() {
        // this.fs.copyTpl(
        //     this.templatePath('../../templates/index.html'),
        //     this.destinationPath('public/index.html'),
        //     { title: 'Templating with Yeoman' }
        // );
        this.fs.copy(
            this.templatePath('../../templates/index.html'),
            this.destinationPath('public/index.html')
        )
    }

    install() {
        this.options.install && this.installDependencies({
            npm: true
        });
    }

    end() {

    }


};